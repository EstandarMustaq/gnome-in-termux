#!/bin/bash

R="$(printf '\033[1;31m')"
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
W="$(printf '\033[1;37m')"
C="$(printf '\033[1;36m')"

function banner() {
    clear
	
printf "\033[33m╭━━━╮╱╱╱╱╱╱╱╱╱╱╱╱╭━━╮╱╱╱╭━━━━╮\033[0m\n"
printf "\033[33m┃╭━╮┃╱╱╱╱╱╱╱╱╱╱╱╱╰┫┣╯╱╱╱┃╭╮╭╮┃\033[0m\n"
printf "\033[33m┃┃╱╰╋━╮╭━━┳╮╭┳━━╮╱┃┃╭━╮╱╰╯┃┃┣┻━┳━┳╮╭┳╮╭┳╮╭╮\033[0m\n"
printf "\033[33m┃┃╭━┫╭╮┫╭╮┃╰╯┃┃━┫╱┃┃┃╭╮╮╱╱┃┃┃┃━┫╭┫╰╯┃┃┃┣╋╋╯\033[0m\n"
printf "\033[33m┃╰┻━┃┃┃┃╰╯┃┃┃┃┃━┫╭┫┣┫┃┃┃╱╱┃┃┃┃━┫┃┃┃┃┃╰╯┣╋╋╮\033[0m\n"
printf "\033[33m╰━━━┻╯╰┻━━┻┻┻┻━━╯╰━━┻╯╰╯╱╱╰╯╰━━┻╯╰┻┻┻━━┻╯╰╯\033[0m\n"
printf "\033[32m code by @sabamdrif \033[0m\n"
printf "\033[32m subscribe my YouTube Channel Hello Android \033[0m\n"                                                     
}

function check_root(){
	if [ $EUID -ne 0 ]; then
		echo -ne " ${R}Please Login Into Root User Then Run it Again!\n\n"${W}
		exit 1
	fi
}

function questions() {
	banner
	echo 
	echo "${G}Select the Gnome Desktop type"${W}
	echo
	echo "${Y}1. Full (~3.5Gb | Recomended)"${W}
	echo
	echo "${Y}2. Core (~1.5GB of space)"${W}
	echo
	read -p "${Y}select an option (Default 1): "${W} answer_desktop
	echo
	banner
	echo 
	echo "${G}Select browser you want to install"${W}
	echo
	echo "${Y}1. firefox"${W}
	echo
	echo "${Y}2. chromium"${W}
	echo 
	echo "${Y}3. firefox & chromium (both)"${W}
	echo
	read -p "${Y}select an option (Default 1): "${W} answer_browser
	echo
	banner
	echo
	read -p "${Y}Do you want to install VLC (y/n) "${w} vlc_answer
	echo
}

function update_sys() {
	banner
	echo "${G}Updating System..."
	apt update && apt-get update 
}
function login() {
	banner
	if [ -f /etc/os-release ]; then
    . /etc/os-release
	if [[ -e "/data/data/com.termux/files/usr/bin/$ID" ]]; then
        rm -rf /data/data/com.termux/files/usr/bin/$ID
    fi
	fi
	read -p "${Y}Do you want to add a normal user account (y/n) ${R}(not recomended) " ${w} useradd_answer
	echo
	if [ "$useradd_answer" = "y" ]; then
	read -p "${G}Input username [Lowercase]:"${W} user_name
	read -p "${G}Input Password :"${W} pass
	useradd -m -s $(which bash) ${user_name}
    echo "${user_name}:${pass}" | chpasswd
	apt install sudo -y
	echo "$user_name ALL=(ALL:ALL) ALL" >> /etc/sudoers
	    cat <<EOF > "/data/data/com.termux/files/usr/bin/$ID"
if [ "\$1" = "-r" ]; then
    proot-distro login $ID
elif [ "\$1" = "-remove" ]; then
    proot-distro remove $ID
	sudo rm /data/data/com.termux/files/home/.sound
	rm \$PREFIX/bin/$ID
elif [ "\$1" = "-vncstart" ]; then
    proot-distro login --user "$user_name" $ID -- /bin/sh -c 'vncstart'
elif [ "\$1" = "-vncstop" ]; then
    proot-distro login --user "$user_name" $ID -- /bin/sh -c 'vncstop'
else
    proot-distro login --user "$user_name" $ID
fi
EOF
else
 cat <<EOF > "/data/data/com.termux/files/usr/bin/$ID"
 if [ "\$1" = "-vncstart" ]; then
    proot-distro login $ID -- /bin/sh -c 'vncstart'
elif [ "\$1" = "-vncstop" ]; then
    proot-distro login $ID -- /bin/sh -c 'vncstop'
elif [ "\$1" = "-remove" ]; then
    proot-distro remove $ID
	sudo rm /data/data/com.termux/files/home/.sound
	rm \$PREFIX/bin/$ID
else
    proot-distro login $ID
fi
EOF
    fi
    chmod +x /data/data/com.termux/files/usr/bin/$ID 
    clear
}

function vlc_installer() {
	banner
if [ "$vlc_answer" == "y" ]; then
	echo "${G}Installing vlc.."${W}
		apt install vlc -y
else
    echo "${C}Canceling Vlc Installation...."${W}
    sleep 1.5
fi
}

function install_chromium() {
	banner
	echo -e "${R} [${W}-${R}]${C} installing chromium..."${W}
	if ["ID" == "ubuntu"]; then 
	apt purge chromium* chromium-browser* snapd -y
		apt install gnupg2 software-properties-common --no-install-recommends -y
		echo -e "deb http://ftp.debian.org/debian buster main\ndeb http://ftp.debian.org/debian buster-updates main" >> /etc/apt/sources.list
		apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DCC9EFBF77E11517
		apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138
		apt-key adv --keyserver keyserver.ubuntu.com --recv-keys AA8E81B4331F7F50
		apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 112695A0E562B32A
		apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32
		apt update -y
		apt install chromium -y
	else
	apt install chromium -y
	fi
    sed -i 's/chromium %U/chromium --no-sandbox %U/g' /usr/share/applications/chromium.desktop
}

function firefox_install() {
		clear
		banner
		sleep 1
		clear
        echo "${Y} Installing Firefox..."${W}
		echo
		echo
			if ["$ID" == "ubuntu"]; then
			wget https://raw.githubusercontent.com/sabamdarif/gnome-in-termux/main/patch/firefox.sh
			bash firefox.sh
			rm firefox.sh
			else
			apt install firefox-esr -y
		fi
}

function browser_installer() {
	banner
	if [[ ${answer_browser} == "1" ]]; then
		clear
		echo "${G}installing Firefox browser.."${W}
		echo 
		firefox_install
	elif [[ ${answer_browser} == "2" ]]; then
		clear
		echo "${G}installing Chromium browser.."${W}
		echo
		install_chromium
	elif [[ ${answer_browser} == "3" ]]; then
		clear
		echo "${G}installing Firefox and Chromium browser.."${W}
		echo
		firefox_install
		install_chromium
	elif [[ ${answer_browser} == "" ]]; then
		clear
		echo "${G}installing Firefox browser.."${W}
		echo 
		firefox_install
	else 
		echo "${G}installing Firefox browser.."${W}
		echo 
		firefox_install
	fi
}

function install_gnome_core() {
	echo "${G}Installing Gnome Core.."${W}
	sleep 2
	echo
	dpkg --configure -a
	apt-get install gnome-shell gnome-terminal gnome-tweaks gnome-software nautilus gnome-shell-extension-manager -y
	clear
}

function install_gnome_full() {
	echo "${G}Installing Gnome Full.."${W}
	sleep 2
    echo
	if [ "${ID}" == "ubuntu" ]; then
	    dpkg --configure -a
        apt-get install ubuntu-gnome-desktop gnome-software gnome-shell-extension-manager -y
    elif [ "${ID}" == "kali" ]; then
	    dpkg --configure -a
        apt-get install kali-desktop-gnome gnome-software gnome-shell-extension-manager -y
	elif [ "${ID}" == "debian" ]; then
	apt install gnome -y
    else
	echo "${G}Installing Gnome Core First"${W}
	sleep 1
        install_gnome_core
        apt-get install gnome -y
    fi
	clear
}
function package() {
	banner
    echo -e "${R} [${W}-${R}]${C} Checking required packages..."${W}
    apt update
     apt --fix-broken install -y
	 dpkg --configure -a
    packs=(nano wget gnome-tweaks software-properties-common gnupg2 tigervnc-standalone-server tigervnc-tools dbus-x11 )
    for pack in "${packs[@]}"; do
        type -p "$pack" &>/dev/null || {
            echo -e "\n${R} [${W}-${R}]${G} Installing package : ${Y}$pack${C}"${W}
             apt-get install "$pack" -y --no-install-recommends
        }
    done
}

function install_desktop() {
    banner
    if [[ ${answer_desktop} == "1" ]]; then
        install_gnome_full
    elif [[ ${answer_desktop} == "2" ]]; then
        install_gnome_core
    elif [[ ${answer_desktop} == "" ]]; then
        install_gnome_full
    fi
}

function vncstop() {
 if [[ -e "/bin/vncstop" ]]; then
        rm -rf /bin/vncstop
    fi
    cat <<EOF > "/bin/vncstop"
#!/usr/bin/env bash
if [ "\$1" == "-f" ]; then
    pkill Xtigervnc
else
    vncserver -kill :*
fi
rm -rf /.vnc/localhost:*.pid
rm -rf /tmp/.X1-lock
rm -rf /tmp/.X11-unix/X1
EOF
chmod +x /bin/vncstop
}

function vncstart() {
	if [[ -e "/bin/vncstart" ]]; then
        rm -rf /bin/vncstart
    fi
  echo "#!/usr/bin/env bash" >>/bin/vncstart
  echo "vncserver -geometry 2580x1080 " >>/bin/vncstart
    chmod +x /bin/vncstart
}

function vnc() {
banner
   echo -e "${R} [${W}-${R}]${C} Setting up VNC Server..."${W}
 if [[ ! -d "$HOME/.vnc" ]]; then
    mkdir -p "$HOME/.vnc"
fi

if [[ -e "$HOME/.vnc/xstartup" ]]; then
    rm "$HOME/.vnc/xstartup"
fi

touch "$HOME/.vnc/xstartup"
cat << EOF >> "$HOME/.vnc/xstartup"
export XDG_CURRENT_DESKTOP="GNOME"
service dbus start
gnome-shell --x11
EOF

chmod +x "$HOME/.vnc/xstartup"

if [ "$useradd_answer" == "y" ]; then
if [[ ! -d "/home/$user_name/.vnc" ]]; then
    mkdir -p "$HOME/.vnc"
fi
cp $HOME/.vnc/xstartup /home/$user_name/.vnc/
chmod +x /home/$user_name/.vnc/xstartup
fi
vncstart
vncstop
 echo -e "${R} [${W}-${R}]${C} Fixing Vnc Login Issue.."${W}
   for file in $(find /usr -type f -iname "*login1*"); do rm -rf $file
   done
}

function add_sound() {
	echo -e "\n${R} [${W}-${R}]${C} Fixing Sound Problem..."${W}
    if [[ ! -e "/data/data/com.termux/files/home/.sound" ]]; then
        touch /data/data/com.termux/files/home/.sound
    fi
    echo "pulseaudio --start --exit-idle-time=-1" >> /data/data/com.termux/files/home/.sound
    echo "pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" >> /data/data/com.termux/files/home/.sound
	echo "$(echo "bash ~/.sound" | cat - /data/data/com.termux/files/usr/bin/$ID )" > /data/data/com.termux/files/usr/bin/$ID
	echo "export PULSE_SERVER=127.0.0.1" >> /etc/profile
    source /etc/profile
}

function check_firefox() {
    echo "${Y}Checking if Firefox is installed or not...${W}"
    if ! type -p "firefox" &>/dev/null; then
        sleep 2
        echo "${R}Firefox not installed...${W}"
        firefox_install
    else
        echo "${G}Firefox is already installed.${W}"
    fi
}

function check_chromium() {
    echo "${Y}Checking if Chromium is installed or not...${W}"
    if ! type -p "chromium" &>/dev/null; then
        sleep 2
        echo "${R}Chromium is not installed...${W}"
        install_chromium
    else
        echo "${G}Chromium is already installed.${W}"
    fi
}

function check_install() {
    echo "${Y}Checking if everything is installed or not...${W}"
    sleep 1
    # Desktop check
    echo "${Y}Checking if GNOME installed...${W}"
    if ! type -p "gnome-shell" &>/dev/null; then
	sleep 2
        echo "${R}GNOME Desktop is not installed perfectly...${W}"
		echo "${G}Fixing ..."${W}
        sleep 2
        install_desktop
    else
        echo "${G}GNOME Desktop is Installed Successfully...${W}"
        sleep 2
    fi
    # Browser check
    if [[ "${answer_browser}" == "1" ]]; then
        check_firefox
    elif [[ "${answer_browser}" == "2" ]]; then
        check_chromium
    elif [[ "${answer_browser}" == "3" ]]; then
        check_firefox
        check_chromium
    else
        check_firefox
    fi
    # VLC check
    if [[ "${vlc_answer}" == "y" ]]; then
        echo "${Y}Checking if VLC is installed or not...${W}"
        if ! type -p "vlc" &>/dev/null; then
            sleep 2
            echo "${R}VLC is not installed, installing now...${W}"
            apt install vlc -y
        fi
    fi
}

function note() {
banner
    echo -e "${G} Successfully Installed !${W}"
    sleep 2
	echo
    echo -e "${G}Now Restart Termux First And Login Into $ID "${W}
	echo
    echo -e "${G}Type ${C}$ID${G} to login into $ID "${W}
	echo
    echo -e "${G}Type ${C}vncstart / $ID -vncstart ${G} to run Vncserver."${W}
	echo
    echo -e "${G}Type ${C}vncstop / $ID -vncstop ${G} to stop Vncserver."${W}
    echo
    echo -e "${C}Install VNC VIEWER or Nethunter Kex on your Device."${W}
    echo
    echo -e "${C}Open VNC VIEWER & Click on + Button."${W}
    echo
    echo -e "${C}Enter the Address localhost:1 & Name it anything you like."${W}
    echo
    echo -e "${C}Connect & Input the Password."${W}
    echo
	if [ "$useradd_answer" == "y" ]; then
	echo -e "${R} If you have problem while running gnome as normal user , just use it as root"${W}
	echo -e "${G} Use command ${C}$ID -r ,${G}To login as root user"${W}
	fi
    echo -e "${C}Enjoy"${W}
    echo
    echo
}

check_root
update_sys
login
questions
package
install_desktop
browser_installer
vlc_installer
vnc
add_sound
check_install
note