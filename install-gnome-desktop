#!/bin/bash

R="$(printf '\033[1;31m')"
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
W="$(printf '\033[1;37m')"
C="$(printf '\033[1;36m')"

function banner() {
    clear
	
printf "\033[33m╭━━━╮╱╱╱╱╱╱╱╱╱╱╱╱╭━━╮╱╱╱╭━━━━╮\033[0m\n"
printf "\033[33m┃╭━╮┃╱╱╱╱╱╱╱╱╱╱╱╱╰┫┣╯╱╱╱┃╭╮╭╮┃\033[0m\n"
printf "\033[33m┃┃╱╰╋━╮╭━━┳╮╭┳━━╮╱┃┃╭━╮╱╰╯┃┃┣┻━┳━┳╮╭┳╮╭┳╮╭╮\033[0m\n"
printf "\033[33m┃┃╭━┫╭╮┫╭╮┃╰╯┃┃━┫╱┃┃┃╭╮╮╱╱┃┃┃┃━┫╭┫╰╯┃┃┃┣╋╋╯\033[0m\n"
printf "\033[33m┃╰┻━┃┃┃┃╰╯┃┃┃┃┃━┫╭┫┣┫┃┃┃╱╱┃┃┃┃━┫┃┃┃┃┃╰╯┣╋╋╮\033[0m\n"
printf "\033[33m╰━━━┻╯╰┻━━┻┻┻┻━━╯╰━━┻╯╰╯╱╱╰╯╰━━┻╯╰┻┻┻━━┻╯╰╯\033[0m\n"
printf "\033[32m code by @sabamdrif \033[0m\n"
printf "\033[32m subscribe my YouTube Channel Hello Android \033[0m\n"                                                     
}

function check_root(){
	if [ "$(id -u)" -ne 0 ]; then
		echo -ne " ${R}Run this program as root!\n\n"${W}
		exit 1
	fi
}

function login() {
    if [[ $(command -v sudo) ]]; then
		apt autoremove sudo -y
	fi
    banner
	read -p $' \e[1;31m[\e[0m\e[1;77m~\e[0m\e[1;31m]\e[0m\e[1;92m Input Username [Lowercase] : \e[0m\e[1;96m' user
    echo -e "${W}"
    read -p $' \e[1;31m[\e[0m\e[1;77m~\e[0m\e[1;31m]\e[0m\e[1;92m Input Password (8 characters must) : \e[0m\e[1;96m\en' pass
    echo -e "${W}"
    useradd -m -s $(which bash) ${user}
	echo "${user}:${pass}" | chpasswd
	if [[ -e "/etc/sudoers" ]]; then
	chmod u+w /etc/sudoers
	echo "$user ALL=(ALL:ALL) ALL" >> /etc/sudoers
	else
	apt update -y
    apt install sudo -y
    echo "$user ALL=(ALL:ALL) ALL" >> /etc/sudoers
	fi
	if [ -f /etc/os-release ]; then
    . /etc/os-release
	 echo "proot-distro login $ID --user $user" > /data/data/com.termux/files/usr/bin/$ID
    fi
    chmod +x /data/data/com.termux/files/usr/bin/$ID 
    clear

}

function video_player_installer() {
	banner
	echo
	echo "${G}Select video player from bellow"${W}
	echo
	echo "${Y}1. mpv (recommended)"${W}
	echo
	echo "${Y}2. vlc media player"${W}
	echo
	echo "${Y}3. both vlc and mpv"${W}
	echo
	echo "${Y}4. skip this part"${W}
	echo
	read -p "${C}select an option(Default 1): "${W} select_vd
	echo
	if [[ ${select_vd} == "1" ]]; then
		mpv_installer
	elif [[ ${select_vd} == "2" ]]; then
		vlc_installer
	elif [[ ${select_vd} == "3" ]]; then
		mpv_installer
		sleep 1
		vlc_installer
	elif [[ ${select_vd} == "4" ]]; then
		echo "moving to the next part"
		sleep 1.7
		clear
	elif [[ ${select_vd} == "" ]]; then
		mpv_installer
	fi

}

function mpv_installer() {

	clear
	banner
	echo
	echo "${Y} Checking if mpv is available or not"${W}
	if [[ $(command -v mpv) ]]; then
		echo 
		echo "${G} mpv is already Installed"${W}
		sleep 1
	else
		echo "${C} mpv is not installed. Installing mpv.."${W}
		echo
		sleep 1
		sudo apt install mpv -y
	fi
}

function vlc_installer() {

	clear
	banner
	echo
	echo "${Y} Checking if vlc is available or not"${W}
	if [[ $(command -v vlc) ]]; then
		echo 
		echo "${G} vlc is already Installed"${W}
		sleep 1
	else
		echo "${C} vlc  is not installed. Installing vlc.."${W}
		echo
		sleep 1
		sudo apt install vlc -y
	fi

}

function chromium() {
	banner
    echo -e "${R} [${W}-${R}]${C} installing chromium..."${W}
    chrome=(chromium* chromium-browser* snapd)
    for hula in "${chrome[@]}"; do
        type -p "$hula" &>/dev/null || {
            echo -e "\n${R} [${W}-${R}]${G} Purging package : ${Y}$hula${C}"${W}
            apt purge "$hula" -y 
            sudo apt purge "$hula" -y 
        }
    done
    sudo apt update -y
    sudo apt install software-properties-common gnupg2 --no-install-recommends -y
    echo -e "${R} [${W}-${R}]${C} Installing Chromium..."${W}
    sudo apt install chromium -y
    sudo sed -i 's/chromium %U/chromium --no-sandbox %U/g' /usr/share/applications/chromium.desktop
}

function firefox_install() {
		clear
		banner
		sleep 1
		clear
        echo "${Y} Checking if  Firefox browser installed already.."
		echo
		echo
		if [[ $(command -v firefox) ]]; then
			echo "${G} Firefox is already installed.."${W}
			sleep .5
			clear
		else
			clear
			sleep 1
			echo "${C} Firefox not found.Installing now.."${W}
			echo
			echo
			sudo apt update;
			sudo apt install firefox-esr -y 
		fi

}

function browser_installer() {
	banner
	echo 
	echo "${G}Select which browser do you want."${W}
	echo
	echo "${Y}1. firefox"${W}
	echo
	echo "${Y}2. chromium"${W}
	echo 
	echo "${Y}3. firefox & chromium (both)"${W}
	echo
	read -p "${Y}select an option(Default 1): "${W} selected_b
	echo
	if [[ ${selected_b} == "1" ]]; then
		clear
		echo "${G}installing Firefox browser.."${W}
		echo 
		firefox_install
	elif [[ ${selected_b} == "2" ]]; then
		clear
		echo "${G}installing Chromium browser.."${W}
		echo
		chromium
	elif [[ ${selected_b} == "3" ]]; then
		clear
		echo "${G}installing Firefox and Chromium browser.."${W}
		echo
		firefox_install
		chromium
	elif [[ ${selected_b} == "" ]]; then
		clear
		echo "${G}installing Firefox browser.."${W}
		echo 
		firefox_install
	else 
		echo "${G}installing Firefox browser.."${W}
		echo 
		firefox_install
	fi
}
		
function package() {
	banner
	echo 
	echo "${G}Installing Gnome Desktop..."${W}
	echo
	echo "${Y}1. Core (Recommended ~1.5GB)"${W}
	echo
	echo "${Y}2. Full (~3Gb)"${W}
	echo
	read -p "${Y}select an option(Default 1): "${W} selected_c
	echo
	if [[ ${selected_c} == "1" ]]; then
		clear
		echo "${G}Installing Gnome Core.."${W}
		echo
		sudo apt install gnome-shell gnome-terminal gnome-tweaks gnome-software -y
	elif [[ ${selected_c} == "2" ]]; then
		clear
		echo "${G}Installing Gnome Full.."${W}
		echo
		sudo apt install ubuntu-desktop gnome-terminal gnome-tweaks gnome-shell-extension-ubuntu-dock -y
if [ -f /etc/os-release ]; then
    . /etc/os-release
    if [ "$ID" == "debian" ]; then
        echo "${G}This is Debian."${W}
        sudo apt install gnome/stable gnome-terminal gnome-tweaks gnome-software -y
    elif [ "$ID" == "ubuntu" ]; then
        echo "${G}This is Ubuntu."${W}
     sudo apt install ubuntu-desktop gnome-terminal gnome-tweaks gnome-shell-extension-ubuntu-dock -y
    else
        echo "${R}Full gnome is only supported in Debian / Ubuntu "${W}
        echo "${G}Installing the core GNOME "${W}
        sudo apt install install gnome-shell gnome-terminal gnome-tweaks -y
    fi
else
    echo "${R}Unable to determine the Linux distribution."${W}
fi

	else 
		echo "${G}Installing Gnome Core.."${W}
		echo
		sudo apt install gnome-shell gnome-terminal gnome-tweaks -y
	fi
	banner
    echo -e "${R} [${W}-${R}]${C} Checking required packages..."${W}
    apt update
	sudo dpkg --configure -a
    sudo apt --fix-broken install -y
    packs=(wget curl nautilus nano gedit tigervnc-standalone-server tigervnc-tools dbus-x11 )
    sudo dpkg --configure -a
    for hulu in "${packs[@]}"; do
        type -p "$hulu" &>/dev/null || {
            echo -e "\n${R} [${W}-${R}]${G} Installing package : ${Y}$hulu${C}"${W}
            sudo apt-get install "$hulu" -y --no-install-recommends
        }
    done
}

function vnc() {
banner
   echo -e "${R} [${W}-${R}]${C} Setting up VNC Server..."${W}
  if [[ ! -d "$HOME/.vnc" ]]; then
        mkdir -p "$HOME/.vnc"
    fi
    if [[ -e "$HOME/.vnc/xstartup" ]]; then
        rm $HOME/.vnc/xstartup
        touch $HOME/.vnc/xstartup
        cat << EOF >> $HOME/.vnc/xstartup
        export XDG_CURRENT_DESKTOP="GNOME"
        service dbus start
        gnome-shell --x11
EOF
        chmod +x $HOME/.vnc/xstartup
		mkdir /$user/.vnc
                mkdir /home/$user/.vnc
		cp  $HOME/.vnc/xstartup /home/$user/.vnc/xstartup
		chmod +x /home/$user/.vnc/xstartup
    fi
   if [[ -e "/usr/local/bin/vncstart" ]]; then
        rm -rf /usr/local/bin/vncstart 
    fi
  echo "#!/usr/bin/env bash" >>/usr/local/bin/vncstart
  echo "dbus-launch" >>/usr/local/bin/vncstart
  echo "vncserver -geometry 2580x1080 " >>/bin/vncstart
    chmod +x /bin/vncstart
  if [[ -e "/bin/vncstop" ]]; then
        rm -rf /bin/vncstop
    fi
  echo "#!/usr/bin/env bash" >>/bin/vncstop
  echo "vncserver -kill :*" >>/usr/local/bin/vncstop
  echo "rm -rf $HOME/.vnc/localhost:*.pid" >>/bin/vncstop
  echo "rm -rf /tmp/.X1-lock" >>/bin/vncstop
  echo "rm -rf /tmp/.X11-unix/X1" >>/bin/vncstop
    chmod +x /bin/vncstop
  if [[ -e "/usr/local/bin/fixvnc" ]]; then
        rm -rf /bin/fixvnc
    fi
  echo "pkill Xtigervnc" >>/bin/fixvnc
  echo "rm -rf $HOME/.vnc/localhost:*.pid" >>/bin/fixvnc
  echo "rm -rf /tmp/.X1-lock" >>/bin/fixvnc
  echo "rm -rf /tmp/.X11-unix/X1" >>/bin/fixvnc
    chmod +x /bin/fixvnc
 echo -e "${R} [${W}-${R}]${C} Fix Vnc Login Issue.."${W}
   for file in $(find /usr -type f -iname "*login1*"); do rm -rf $file
   done

}

function add_sound() {
	echo -e "\n${R} [${W}-${R}]${C} Fixing Sound Problem..."${W}
    if [[ ! -e "/data/data/com.termux/files/home/.sound" ]]; then
        touch /data/data/com.termux/files/home/.sound
    fi
    echo "pulseaudio --start --exit-idle-time=-1" >> /data/data/com.termux/files/home/.sound
    echo "pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" >> /data/data/com.termux/files/home/.sound
	echo "$(echo "bash ~/.sound" | cat - /data/data/com.termux/files/usr/bin/ubuntu)" > /data/data/com.termux/files/usr/bin/ubuntu
	echo "export PULSE_SERVER=127.0.0.1" >> /etc/profile
    source /etc/profile

}

function clenup() {
	clear
    banner
	echo
	echo "${G}Cleaning up system.."${W}
	echo
    sleep 2
    cd ~
	sudo dpkg --configure -a
	sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y
	sleep 2
        sleep 2
    sudo apt clean && sudo apt autoclean  
}

function note() {
banner
    echo -e "${G} Successfully Installed !${W}"
    sleep 1
	echo
    echo -e "${G}Now Restart Termux First And Login Into Your Distro"${W}
	echo
    echo -e "${G}Type ${C}$ID${G} to login into your distro."${W}
	echo
    echo -e "${G}Type ${C}vncstart${G} to run Vncserver."${W}
	echo
    echo -e "${G}Type ${C}vncstop${G} to stop Vncserver."${W}
    echo
	echo -e "${G}Type ${C}vncfix${G} to fix vncserver launching problem"${W}
	echo
    echo -e "${C}Install VNC VIEWER or Nethunter Kex on your Device."${W}
    echo
    echo -e "${C}Open VNC VIEWER & Click on + Button."${W}
    echo
    echo -e "${C}Enter the Address localhost:1 & Name anything you like."${W}
    echo
    echo -e "${C}Set the Picture Quality to High for better Quality."${W}
    echo
    echo -e "${C}Click on Connect & Input the Password."${W}
    echo
    echo -e "${C}Enjoy :D"${W}
    echo
    echo

}


check_root
login
package
browser_installer
video_player_installer
vnc
add_sound
clenup
note
